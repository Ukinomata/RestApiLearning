1) устанавливаем логрус
~go get github.com/sirupsen/logrus

2) создаем папку под все логи и файлы в ней

logs/all.log

3) в директории pkg создаем директорию logging а в ней файл logging.go

создаем новый логгер с помощью logrus.New

ставим report caller не знаю зачем но пусть будет.

выставим formatter
CallerPrettyfier: func(frame *runtime.Frame) (function string, file string) {
			filename := path.Base(frame.File)
			return fmt.Sprintf("%s()", frame.Function), fmt.Sprintf("%s:%d", filename, frame.Line)
		},

Форматтер (formatter) в логгере - это компонент, который определяет, как будет отображаться информация в журнале.
Он определяет формат для каждого сообщения, включая дату, время, уровень журнала и текст сообщения.
Форматтеры позволяют настраивать вывод информации в журнале в соответствии с требованиями приложения или
пользовательскими предпочтениями.

вызываем параметр CallerPrettyfier
далее отключим цвета.

создаем директорию под логи

os.mkdirall("logs",0644)

открываем файл внутри папки

allfile, err := os.OpenFile("logs/all.log", os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0640)

запрещаем отправлять логи

l.SetOutput(io.Discard)

Пишем хуки

type writerHook struct{
	Writer []io.Writer
	LogLevels []logrus.Level
}

Хуки нужны для того чтобы иметь возможность распределить ответы по уровням логирования

добавляем хуки в логгер

после того как мы дописали логгер и прописали хуки нужно получить логгер
func GetLogger

logrus.Entry  - это структура в библиотеке логирования Logrus, которая представляет запись в журнале.
Она содержит информацию о сообщении, уровне логирования, времени и контексте,
а также методы для форматирования и вывода сообщения.
Эта структура используется для создания и записи логов в приложении.